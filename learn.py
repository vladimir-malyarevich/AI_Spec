# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
import os  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import pickle  # –î–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
from telebot import types  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Telegram –±–æ—Ç–∞
from request import gpt_request  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GPT-–º–æ–¥–µ–ª–∏
import re  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
from datetime import datetime  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏—è
# –§–æ—Ä–º–∞—Ç: {chat_id: session_data}
learning_sessions = {}

def init_learning_module(bot_instance):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞"""
    global bot  # –î–µ–ª–∞–µ–º bot –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    bot = bot_instance  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞

def start_learning_session(message):
    """–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è - –∑–∞–ø—Ä–æ—Å —Ç–µ–º—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–µ–º—ã
    msg = bot.send_message(
        message.chat.id,  # ID —á–∞—Ç–∞
        "üìñ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å:",  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup=markup  # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ
    learning_sessions[str(message.chat.id)] = {
        'stage': 'awaiting_topic',  # –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø
        'message_id': msg.message_id  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    }
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.register_next_step_handler(msg, process_topic_input)

def process_topic_input(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Ç–µ–º—ã —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        cleanup_session(message.chat.id)  # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        return bot.send_message(message.chat.id, "–û–±—É—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT —Å —á–µ—Ç–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
    prompt = f"""
    –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –º–∏–Ω–∏–º—É–º 5 –∞–±–∑–∞—Ü–µ–≤ –ø–æ —Ç–µ–º–µ: {message.text}
    –°–æ–∑–¥–∞–π 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–ºe.
    –®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞:
    –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏)
    ---
    –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ —Ç–æ–ª—å–∫–æ —Å 1 –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –í –∫–∞–∂–¥–æ–º –≤–æ–ø—Ä–æ—Å–µ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞. –ó–∞–¥–∞–π –Ω—É–º–µ—Ä–∞—Ü–∏—é —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç 1 –¥–æ 4 (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –±—É–∫–≤—ã –≤ –Ω—É–º–µ—Ä–∞—Ü–∏–∏) –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤. –°–¥–µ–ª–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã –≤–æ–ø—Ä–æ—Å—ã –±—ã–ª–æ —É–¥–æ–±–Ω–æ —Å—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ü—É—Å—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ —Å–ª–æ–≤–∞ ";;–í–æ–ø—Ä–æ—Å", –∑–∞—Ç–µ–º –∏–¥—ë—Ç —Ç–µ–ª–æ –í–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –û—Ç–≤–µ—Ç–∞ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–ª–æ–≤–æ–º "–û—Ç–≤–µ—Ç". –ü–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–¥—ë—Ç –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –°–ª–æ–≤–æ "–û—Ç–≤–µ—Ç" –Ω–µ –Ω–∞–¥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å.
    """
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    bot.send_chat_action(message.chat.id, 'typing')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
    response = gpt_request(prompt)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if not response:
        cleanup_session(message.chat.id)
        return bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")

    # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–æ—Ä–∏—é –∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é ---
        if '---' in response:
            theory_part = response.split('---', 1)[:-1]  # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å
            questions_part = response.split('---', 1)[-1]  # –ß–∞—Å—Ç—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        elif '–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ' in response:
            theory_part = response.split('–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ', 1)[:-1]
            questions_part = response.split('–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ', 1)[-1]
        else:
            theory_part = response
            questions_part = ""
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ theory_part - —Å–ø–∏—Å–æ–∫
        if type(theory_part) == list:
            theory_part = ' '.join(theory_part)
        theory = theory_part.strip()  # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        questions = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É
        questions_part = questions_part.replace('*','')  # –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        question_blocks = questions_part.split(';')[1:]  # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é ;;
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
        for block in question_blocks:
            if not block.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –±–ª–æ–∫–∏
                continue
                
            try:
                # –†–∞–∑–±–∏–≤–∞–µ–º –±–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—á–∏—â–∞–µ–º –∏—Ö
                lines = [line.strip() for line in block.split('\n') if line.strip()]
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ (—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏)
                if len(lines[0])>10:  # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–Ω–∞—è - —ç—Ç–æ –≤–æ–ø—Ä–æ—Å
                    question_text = lines[0]
                else:  # –ò–Ω–∞—á–µ –≤–æ–ø—Ä–æ—Å –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ
                    question_text = lines[1]
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∏—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏)
                options = []
                for line in lines[-6:-1]:  # –ò—â–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
                    if line and line[0].isdigit() and line[1] in ('.', ')'):
                        options.append(line[2:].strip())  # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –Ω–æ–º–µ—Ä–∞
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏)
                answer_line = lines[-1]
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
                correct_answer = int(re.sub(r'[^0-9]', '', answer_line))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å
                if question_text and len(options) == 4 and correct_answer is not None and correct_answer <=4:
                    formatted_question = {
                        'text': question_text,  # –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
                        'options': options,  # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                        'correct': correct_answer,  # –ù–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1-based)
                        'original_format': block  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    }
                    questions.append(formatted_question)    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–ø—Ä–æ—Å–∞: {e}")
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
        if not questions:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        cleanup_session(message.chat.id)
        return bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É.")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
    learning_sessions[str(message.chat.id)] = {
        'stage': 'materials_shown',  # –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø
        'theory': theory,  # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å
        'questions': questions,  # –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        'current_question': 0,  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        'correct_answers': 0  # –°—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    send_learning_materials(message.chat.id, theory)
    
def send_learning_materials(chat_id, theory):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–æ—Ä–∏—é –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)
    max_length = 4000
    parts = [theory[i:i+max_length] for i in range(0, len(theory), max_length)]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for part in parts:
        bot.send_message(chat_id, part)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"))
    markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
    bot.send_message(
        chat_id,
        "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≥–æ—Ç–æ–≤—ã. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è?",
        reply_markup=markup
    )
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.register_next_step_handler_by_chat_id(chat_id, handle_test_decision)

def handle_test_decision(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        cleanup_session(message.chat.id)
        return bot.send_message(message.chat.id, "–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", 
                              reply_markup=types.ReplyKeyboardRemove())
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞
    if message.text.lower() == '–ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç':
        session = learning_sessions.get(str(message.chat.id))
        if session and 'questions' in session:
            session['stage'] = 'testing'  # –ú–µ–Ω—è–µ–º —ç—Ç–∞–ø –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            send_question_gpt(str(message.chat.id), 0)  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        else:
            bot.send_message(message.chat.id, "–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")

def send_question_gpt(chat_id, question_idx):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞"""
    session = learning_sessions.get(chat_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
    if not session or question_idx >= len(session['questions']):
        return finish_test_session(chat_id)  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
    
    question = session['questions'][question_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º
    question_msg = (
        f"üìù –í–æ–ø—Ä–æ—Å {question_idx + 1}/{len(session['questions'])}:\n"
        f"{question['text']}\n\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    for i, option in enumerate(question['options']):
        question_msg += f"{i+1}. {option}\n"
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    markup = types.InlineKeyboardMarkup(row_width=2)
    for i, option in enumerate(question['options']):
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        btn_text = f"{i+1}. {option[:20]}..." if len(option) > 20 else f"{i+1}. {option}"
        markup.add(types.InlineKeyboardButton(
            text=btn_text,
            # –§–æ—Ä–º–∞—Ç callback_data: learntest_–Ω–æ–º–µ—Ä–≤–æ–ø—Ä–æ—Å–∞_–Ω–æ–º–µ—Ä–æ—Ç–≤–µ—Ç–∞_–Ω–æ–º–µ—Ä–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ
            callback_data=f"learntest_{question_idx}_{i}_{question['correct']}"
        ))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    msg = bot.send_message(
        chat_id,
        question_msg,
        reply_markup=markup
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    session['current_question'] = question_idx  # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    session['last_question_msg'] = msg.message_id  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

def finish_test_session(chat_id):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    session = learning_sessions.get(chat_id)
    if not session:
        return
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total = len(session['questions'])
    correct = session['correct_answers']
    score = (correct / total) * 100
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_test_results(chat_id, score)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_msg = (
        f"üìä –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total}\n"
        f"üíØ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score:.1f}%\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if score >= 70:
        result_msg += "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã —Ö–æ—Ä–æ—à–æ —É—Å–≤–æ–∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª."
    elif score >= 50:
        result_msg += "–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª."
    else:
        result_msg += "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –µ—â–µ —Ä–∞–∑."
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    bot.send_message(
        chat_id,
        result_msg,
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    cleanup_session(chat_id)

def save_test_results(user_id, score):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = load_user_data()
        user_id_str = str(user_id)
        
        if user_id_str not in user_data:
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ—Ç
        if 'learning_history' not in user_data[user_id_str]:
            user_data[user_id_str]['learning_history'] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        user_data[user_id_str]['learning_history'].append({
            'score': score,  # –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            'date': datetime.now().strftime("%Y-%m-%d %H:%M")  # –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        })
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        save_user_data(user_data)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return False

def cleanup_session(chat_id):
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é"""
    # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    if str(chat_id) in learning_sessions:
        del learning_sessions[str(chat_id)]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ú–µ–Ω—é")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
    bot.send_message(
        chat_id,
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ",
        reply_markup=markup
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists('user_data.pkl'):
        with open('user_data.pkl', 'rb') as f:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è
            return pickle.load(f)  # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
    return {}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç

def save_user_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    with open('user_data.pkl', 'wb') as f:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
        pickle.dump(data, f)  # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ